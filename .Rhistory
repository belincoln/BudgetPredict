prediction3 <- predict(lm_crime3, test3)
prediction3
library(DAAG)
packages(DAAG)
install DAAG
install.packages(DAAG)
install.packages('DAAG')
library(DAAG)
set.seed(42)
cv_mod <- cv.lm(data_3,lm_crime3, m=4)
final_pred <- predict(cv_mod, test3)
cv_mod <- cv.lm(df = data_3,form.lm = lm_crime3, m=4)
cv_mod <- cv.lm( data_3,lm_crime3, m=4)
#Clear the session, set directory, and input data
rm(list = ls())
setwd('C:/Users/mczerwinski/Documents/edX/ISYE6501/hwk6')
data <- read.csv('uscrimes.csv', header = TRUE)
data <- read.csv('uscrime.csv', header = TRUE)
crime <- read.csv('uscrime.csv', header = TRUE)
library(GGally)
instal GGally
install GGally
package GGaly
install package GGally
library(devtools)
install.packages("GGally")
library(GGally)
ggpairs(crime, columns = c("Po1", "Po2", "U1","Ineq" ))
PCA <- prcomp(crime[,1:15], scale = TRUE)
summary(PCA)
PCA$rotation
summary(PCA)s
summary(PCA)
screeplot(PCA, type = "lines", col = "blue")
PC <- PCA[,1:4]
PC <- PCA$x[,1:4]
crimePC <- cbind(PC,crime[,16])
PCmodel <- lm(V5~.,data = as.data.frame(uscrimePC))
PCmodel <- lm(V5~.,data = as.data.frame(crimePC))
summary(PCA)
summary(PCmodel)
PCmodel$coefficients
betas <- PCmodel$coefficients
betas
PCA$rotation
rotation_mtrx <- PCA$rotation[,1:4]
alphas <- betas%*%rotation_mtrx
alphas <- as.matrix(betas)%*%as.matrix(rotation_mtrx)
rotation_mtrx <- t(as.matrix(PCA$rotation[,1:4]))
alphas <- as.matrix(betas)%*%as.matrix(rotation_mtrx)
betas <- as.matrix(PCmodel$coefficients)
alphas <- betas%*%rotation_mtrx
betas
rotation_mtrx
betas
betas <- as.matrix(PCmodel$coefficients[,2])
betas
betas <- as.matrix(PCmodel$coefficients[,1])
betas <- as.matrix(PCmodel$coefficients[1])
betas
betas <- as.matrix(PCmodel$coefficients[[1]])
betas
betas <- PCmodel$coefficients
betas
betas[2,]
betas[1:5]
betas[[1:5]]
betas <- as.matrix(PCmodel$coefficients)
dim(betas)
betas <- as.matrix(PCmodel$coefficients)
PCmodel$coefficients
PCmodel$coefficients[-1]
betas <- as.matrix(PCmodel$coefficients[-1])
#Transpose the rotation matrix so it fits with the beta matrix.
rotation_mtrx <- t(as.matrix(PCA$rotation[,1:4]))
rotation_mtrx
alphas <- betas%*%rotation_mtrx
dim(betas)
dim(rotation_mtrx)
#Transpose the rotation matrix so it fits with the beta matrix.
rotation_mtrx <- as.matrix(PCA$rotation[,1:4])
dim(rotation_mtrx)
alphas <- betas%*%rotation_mtrx
alphas <- rotation_mtrx%*%betas
alphas
rm(list = ls())
setwd('C:/Users/mczerwinski/Documents/edX/ISYE6501/hwk7')
crime <- read.csv('uscrime.csv', header = TRUE)
library(tree)
import tree
library(tree)
install tree
package(tree)
install tree
install package(tree)
install.packages(tree)
install.packages("tree")
library(tree)
crime_tree <- tree(Crime~.,data=crime)
summary(crime_tree)
plot(crime_tree)
text(crime_tree)
plot(crime_tree)
text(crime_tree)
crime_tree$frame
crime_tree$where
text(crime_tree)
plot(crime_tree)
text(crime_tree)
summary(crime_tree)
crime_tree$frame
crime_tree$where
yhat_tree <- predict(uscrime_tree)
yhat_tree <- predict(crime_tree)
plot(yhat_tree,crime$Crime)
prune.tree(crime_tree)$size
prune.tree(crime_tree)$dev
set.seed(1)
cv.tree(crime_tree)$dev
crime_tree_pruned <- prune.tree(crime_tree,best=4)
plot(crime_tree_pruned)
test(crime_tree_pruned)
plot(crime_tree_pruned)
text(crime_tree_pruned)
library(randomforest)
install.packages("randomforest")
library(randomforest)
install.packages((randomForest))
install.packages("randomForest")
library(randomForest)
1+log(15)
set.seed(42)
crime_rf <- randomForest(Crime~.,
data = crime,
mtry = num_pred,
importance = TRUE,
ntree = 500)
set.seed(42)
num_pred <-4
crime_rf <- randomForest(Crime~.,
data = crime,
mtry = num_pred,
importance = TRUE,
ntree = 500)
crime_rf
rm(list = ls())
credit <- read.csv("germancredit.csv",header = FALSE)
credit$V21[credit$V21==1]<-1
credit$V21[credit$V21==1]<-0
credit$V21[credit$V21==2]<-1
head(credit)
#Splitting data into training and test data. 80% train, 20% test
rows <- dim(credit(1))
#Splitting data into training and test data. 80% train, 20% test
rows <- dim(credit)[1]
train_rows <- sample(1:rows, size = round(8*rows/10),
replace = FALSE, prob = rep(1/rows, rows))
train <- crime[train_rows,]
test <- crime[-train_rows,]
train <- credit[train_rows,]
test <- credit[-train_rows,]
dim(credit)
dim(train)
credit_model <- glm(V21~.,
family = binomial(link = "logit"),
data = train)
yhat <- predict(credit_model, test, type = "response")
summary(credit_model)
yhat <- predict(credit_model, test, type = "response")
yhat
library(pROC)
install.packages("pROC")
library(pROC)
library(pROC)
roc(test$V21,round(yhat))
yhat_thresh <- as.integer(yhat > thresh)
#initial test threshold
thresh = 0.8
yhat_thresh <- as.integer(yhat > thresh)
conf_matrix <- as.matrix(table(yhat_thresh,test$V21))
conf_matrix
table(yhat_thresh,test$V21)
yhat_thresh
table(yhat_thresh)
table(yhat_thresh,test$V21)
table(yhat_thresh)
roc(test$V21,round(yhat))
roc(test$V21,yhat_thresh)
#Clear the session, set directory, and input data
rm(list = ls())
setwd('C:/Users/mczerwinski/Documents/edX/ISYE6501/hwk8')
crime <- read.csv('uscrime.csv', header = TRUE)
model_back <- lm(Crime~., data = crime)
steP(model_back,
direction = "backward")
stpP(model_back,
direction = "backward")
step(model_back,
direction = "backward")
step(model_both,
scope = list(lower = formula(lm(Crime~1, data = crime)),
upper = formula(lm(Crime~.,data = crime))),
direction = "both")
#First we start with backward regression
model_back <- lm(Crime~., data = crime)
step(model_back,
direction = "backward")
step(model_back,
direction = "backward",
trace = 0)
#Perform forward selection
model_forward <- lm(Crime~1, data = crime)
step(model_forward,
scope = formula(lm(Crime~.,data = crime)),
direction = "forward")
# perform stepwise regression from both directions
model_both <- lm(Crime~., data = crime)
step(model_both,
scope = list(lower = formula(lm(Crime~1, data = crime)),
upper = formula(lm(Crime~.,data = crime))),
direction = "both")
library(glmnet)
install.packages("glmnet")
library(glmnet)
set.seed(42)
model_lasso <- cv.glmnet(x=as.matrix(crime[-16]),
y=as.matrix(crime[,16]),
alpha =1,
nfolds=8,
nlambda=20,
type.measure="mse",
family="gaussian",
standardize=TRUE)
cbind(model_lass$lambda,model_lasso$cvm, model_lasso$nzero)
cbind(model_lasso$lambda,model_lasso$cvm, model_lasso$nzero)
plot(model_lasso)
i=1
lambdas = c()
for (a in c(0,0.1,0.2,0.3,0.4,0.5,0.6,0.7,0.8,0.9,1)){
model_elastic <- cv.glmnet(x=as.matrix(crime[-16]),
y=as.matrix(crime[,16]),
alpha =a,
nfolds=8,
nlambda=20,
type.measure="mse",
family="gaussian",
standardize=TRUE)
lambdas[[1]]= model_elastic$lambda.min
i=i+1
}
lamdas
lambdas
lambdas[[i]]= model_elastic$lambda.min
for (a in c(0,0.1,0.2,0.3,0.4,0.5,0.6,0.7,0.8,0.9,1)){
model_elastic <- cv.glmnet(x=as.matrix(crime[-16]),
y=as.matrix(crime[,16]),
alpha =a,
nfolds=8,
nlambda=20,
type.measure="mse",
family="gaussian",
standardize=TRUE)
lambdas[[i]]= model_elastic$lambda.min
i=i+1
}
lambdas
coef(model_lasso,s=model_lasso$lambda.min)
View(model_lasso)
for (a in c(0,0.1,0.2,0.3,0.4,0.5,0.6,0.7,0.8,0.9,1)){
model_elastic <- cv.glmnet(x=as.matrix(crime[-16]),
y=as.matrix(crime[,16]),
alpha =a,
nfolds=8,
nlambda=20,
type.measure="mse",
family="gaussian",
standardize=TRUE)
lambdas[[i]]= model_elastic$lambda.min
i=i+1
i
lambdas[[i]]
}
for (a in c(0,0.1,0.2,0.3,0.4,0.5,0.6,0.7,0.8,0.9,1)){
model_elastic <- cv.glmnet(x=as.matrix(crime[-16]),
y=as.matrix(crime[,16]),
alpha =a,
nfolds=8,
nlambda=20,
type.measure="mse",
family="gaussian",
standardize=TRUE)
lambdas[[i]]= model_elastic$lambda.min
i=i+1
i
lambdas[i]
}
for (a in c(0,0.1,0.2,0.3,0.4,0.5,0.6,0.7,0.8,0.9,1)){
model_elastic <- cv.glmnet(x=as.matrix(crime[-16]),
y=as.matrix(crime[,16]),
alpha =a,
nfolds=8,
nlambda=20,
type.measure="mse",
family="gaussian",
standardize=TRUE)
lambdas[[i]]= model_elastic$lambda.min
i=i+1
print(i)
print(lambdas[i])
}
i=1
lambdas = c()
for (a in c(0,0.1,0.2,0.3,0.4,0.5,0.6,0.7,0.8,0.9,1)){
model_elastic <- cv.glmnet(x=as.matrix(crime[-16]),
y=as.matrix(crime[,16]),
alpha =a,
nfolds=8,
nlambda=20,
type.measure="mse",
family="gaussian",
standardize=TRUE)
lambdas[[i]]= model_elastic$lambda.min
i=i+1
print(i)
print(lambdas[i])
}
lambdas
install.packages("FrF2")
library(FrF2)
setwd('C:/Users/mczerwinski/Documents/edX/ISYE6501/hwk9')
library(FrF2)
#Clear the session, set directory, and input data
rm(list = ls())
library(FrF2)
setwd('C:/Users/mczerwinski/Documents/edX/ISYE6501/hwk9')
model <- FrF2(nruns = 16, nfactors = 10)
model
summary(model)
#Clear the session, set directory, and input data
rm(list = ls())
setwd('C:/Users/mczerwinski/Documents/edX/ISYE6501/hwk10')
data = read.table("breast-cancer-wisconsin.data")
data
#Clear the session, set directory, and input data
rm(list = ls())
setwd('C:/Users/mczerwinski/Documents/edX/ISYE6501/hwk10')
data = read.table("breast-cancer-wisconsin.data.txt", stringAsFactors = FALSE, header = FALSE, sep = ",")
data = read.table("breast-cancer-wisconsin.data.txt", stringsAsFactors = FALSE, header = FALSE, sep = ",")
head(data)
summary(data)
impute_mn <- which(data$V7 == "?")
impute_mn
#find amount of missing data:
length(imput_mn)/nrow(data)
#get the indices of the rows that have a missing value for V7
impute_mn <- which(data$V7 == "?")
#find amount of missing data:
length(impute_mn)/nrow(data)
#Separate the clean data from the missing data
clean_data <- data[-impute_mn,]
missing_data <- data[impute_mn,]
table(data$V11)
table(clean_data$V11)
table(missing_data$V11)
sum(data$V11 == 2)/nrow(data)
sum(clean_data$V11 == 2)/nrow(clean_data)
sum(missing_data$V11 == 2)/nrow(missing_data)
data[impute_vals,] <- 2
#get the indices of the rows that have a missing value for V7
impute_vals <- which(data$V7 == "?")
data[impute_vals,] <- 2
table(data$V11)
table(data$V7)
data = read.table("breast-cancer-wisconsin.data.txt", stringsAsFactors = FALSE, header = FALSE, sep = ",")
head(data)
summary(data)
impute_vals
#Separate the clean data from the missing data
clean_data <- data[-impute_vals,]
missing_data <- data[impute_vals,]
table(clean_data$V11)
table(missing_data$V11)
table(missing_data$V11)
sum(data$V11 == 2)/nrow(data)
sum(clean_data$V11 == 2)/nrow(clean_data)
table(missing_data$V7)
table(clean_data$V7)
mean(clean_data$V7)
mean(list(clean_data$V7))
mean(as.numeric(clean_data$V7))
mean_val <- mean(as.numeric(clean_data$V7))
data[impute_vals,]$V7 <- mean_val
table(data$V7)
data[impute_vals,]$V7 <- 1
#Confirming that the 16 rows with missing data have the new value of 1
table(data$V7)
mean_data <- data
mean_data[impute_vals, ] <- mean_val
mode_data <- data
mode_data[impute_vals, ] <- 1#Confirming that the 16 rows with missing data have the new value of 1
#Confirming that the 16 rows with missing data have the new value of 1
table(mean_data$V7)
table(mode_data&V7)
table(mode_data$V7)
data_reg <- data
data_reg_p <- data
data_reg <- data[,-V11]
data_reg <- data[1:10]
data_reg_clean <- data_reg[-impute_vals,]
data_reg_missing <- data_reg[impute_vals,]
reg_model <- lm(V7~., data = data_reg_clean)
reg_imputed_vals <- predict(reg_model, data_reg_missing)
reg_imputed_vals
v7_pert <- rnorm(16, mean = reg_imputed_vals, sd = stdev(reg_imputed_vals))
v7_pert <- rnorm(16, mean = reg_imputed_vals, sd = sd(reg_imputed_vals))
v7_pert
reg_imputed_vals
v7_pert <- rnorm(16, mean = mean(reg_imputed_vals), sd = sd(reg_imputed_vals))
v7_pert
v7_pert <- rnorm(16, mean = 0, sd = sd(reg_imputed_vals))
v7_pert
pert <- rnorm(16, mean = 0, sd = sd(reg_imputed_vals))
v7_pert <- round(pert + reg_imputed_vals)
v7
v7_pert
s = sort(rexp(100))
s
v7_scaled <- rescale(v7_pert, to=c(0,10))
v7_pert
install.packages("scales")
library("scales")
v7_scaled <- rescale(v7_pert, to=c(0,10))
v7_scaled
v7_pert
v7_scaled
pert <- rnorm(16, mean = 0, sd = sd(reg_imputed_vals))
v7_pert <- round(pert + reg_imputed_vals)
v7_pert
v7_scaled <- round(rescale(v7_pert, to=c(0,10)))
v7_scaled
data <- read.csv()
data <- read.csv("FY2019_070_Contracts_Full_20200110_1.csv")
data <- read.csv('FY2019_070_Contracts_Full_20200110_1.csv')
data <- read.csv('FY2019_070_Contracts_Full_20200110_1.csv')
fix(myData)
myData <- read.csv('credit_card_data_headers.csv',header = TRUE)
data <- read.csv('FY2019_070_Contracts_Full_20200110_1.csv')
setwd('C:\Users\mczerwinski\Documents\BTIBudgetTool\Repo\BudgetPredict')
setwd("C:\Users\mczerwinski\Documents\BTIBudgetTool\Repo\BudgetPredict")
setwd("C:\\Users\\mczerwinski\\Documents\\BTIBudgetTool\\Repo\\BudgetPredict")
data <- read.csv('FY2019_070_Contracts_Full_20200110_1.csv')
cor(data)
chart.correlation(data)
innstall(chart)
install("chart")
install.packages("chart")
install.packages("plotly")
chart.correlation(data)
setwd("C:\\Users\\mczerwinski\\Documents\\BTIBudgetTool\\Repo\\BudgetPredict")
data <- read.csv('FY2019_070_Contracts_Full_20200110_1.csv')
chart.correlation(data)
library("ggally")
install.packages("ggally")
install.packages("GGally")
library("GGally")
install.packages("ggplot2")
library("GGally")
library("plotly")
setwd("C:\\Users\\mczerwinski\\Documents\\BTIBudgetTool\\Repo\\BudgetPredict")
data <- read.csv('FY2019_070_Contracts_Full_20200110_1.csv')
chart.correlation(data)
ggpairs(data)
library(ggplot2)
library(GGally)
install.packages(c("GGally", "ggplot2"))
ggpairs(data)
library(PerformanceAnalytics)
install.packages("PerformanceAnalytics")
library("PerformanceAnalytics")
chart.correlation(data)
library(PerformanceAnalytics)
ggpairs(data)
chart.correlation(data)
pairs(data)
summary(data)
corrplot(data)
install.packages(corrplot)
install.packages("corrplot")
library(corrplot)
corrplot(data)
corrplot(data.asmatrix)
corrplot(data.matrix)
corrplot(data)
typeof(data)
typeof(data.df)
data <- read.csv('FY2019_070_Contracts_Full_20200110_1.csv', headers = TRUE)
data <- read.csv('FY2019_070_Contracts_Full_20200110_1.csv', header = TRUE)
typeof(data)
print(data)
print(data[:3])
print(data[3])
print(data[][3])
print(data[:,3])
print(data[,3])
print(data[0:3,])
print(dim(data))
typeof(as.matrix(data))
corrplot(as.matrix(data))
View(data)
head(data)
lm_crime <- lm(federal_action_obligation
~.,data = data)
